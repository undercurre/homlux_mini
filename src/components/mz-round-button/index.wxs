var btn = require('../../commons/wxs/btn.wxs')

var isPressed = {} // 当前是否点击状态
var isOn = {}

// 处理属性初始化，以及变更
function propObserver(newValue, oldValue, ownerInstance) {
  if (newValue === oldValue) {
    return
  }
  var key = ownerInstance.getDataset().key
  isOn[key] = newValue

  console.log(key, 'propObserver, isOn === ', newValue)

  // 点击中不必响应值变化
  if (isPressed[key]) {
    return
  }

  var iWrapper = ownerInstance.selectComponent('.mz-button')
  var iIcon = ownerInstance.selectComponent('.icon')
  var iIconActive = ownerInstance.selectComponent('.iconActive')
  var iText = ownerInstance.selectComponent('.text')
  var iTextActive = ownerInstance.selectComponent('.textActive')

  btn.bgTransition(iWrapper, newValue)

  if (iIconActive) {
    btn.opacityTransition(iIcon, iIconActive, newValue)
  }
  if (iText) {
    btn.opacityTransition(iText, iTextActive, newValue)
  }
}

function touchStart(event, ownerInstance) {
  var key = ownerInstance.getDataset().key
  ownerInstance.callMethod('handleTouchStart', event)

  console.log(key, isOn[key])

  var iWrapper = ownerInstance.selectComponent('.mz-button')
  var iIcon = ownerInstance.selectComponent('.icon')
  var iIconActive = ownerInstance.selectComponent('.iconActive')
  var iText = ownerInstance.selectComponent('.text')
  var iTextActive = ownerInstance.selectComponent('.textActive')

  isPressed[key] = true

  btn.bgTransition(iWrapper, !isOn[key])

  if (iIconActive) {
    btn.opacityTransition(iIcon, iIconActive, !isOn[key])
  }
  if (iText) {
    btn.opacityTransition(iText, iTextActive, !isOn[key])
  }
}

function touchEnd(event, ownerInstance) {
  var key = ownerInstance.getDataset().key
  isPressed[key] = false
}

module.exports = {
  touchStart: touchStart,
  touchEnd: touchEnd,
  propObserver: propObserver,
}
